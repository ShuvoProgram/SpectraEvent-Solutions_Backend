// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String         @id @default(uuid())
    email        String         @unique
    password     String
    firstName    String?
    middleName   String?
    lastName     String?
    profileImage String?
    contactNo    String?
    dateOfBirth  String?
    bio          String?
    gender       GENDER?
    needsPasswordChange Boolean? @default(false)
    bloodGroup   String?
    address      String?
    role         String         @default("user")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    booking      Booking[]
    Review       Review[]
    Favorite     Favorite[]
    feedback Feedback[]
    Admin        Admin?         @relation(fields: [adminId], references: [id])
    adminId      String?
    Notification Notification[]

    @@map("users")
}

model Admin {
    id           String         @id @default(uuid())
    email        String         @unique
    password     String
    firstName    String?
    middleName   String?
    lastName     String?
    profileImage String?
    contactNo    String?
    dateOfBirth  String?
    bio          String?
    gender       GENDER?
    bloodGroup   String?
    needsPasswordChange Boolean? @default(false)
    address      String?
    role         Admin_ROLES    @default(admin)
    users        User[]
    vanue Vanue[]
    event        Event[]
    blog         Blog[]
    Category Category[]

    @@map("admins")
}

// Event Category
model Category {
    id             String          @id @default(uuid())
    name           String?
    image          String?
    adminId        String?
    event          Event[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    Admin          Admin?          @relation(fields: [adminId], references: [id])
    @@map("Categorys")
}

// Event
model Event {
    id             String       @id @default(uuid())
    title          String?
    CategoryId String
    isBooked       Boolean?      @default(false)
    description    String?
    facility       String?
    vanueId String
    price          Int?
    people   Int?          @default(0)
    eventImg       String?
    adminId        String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    Booking        Booking[]
    Review         Review[]
    availableEvent AvailableEvent[]
    Favorite       Favorite?
    Vanue Vanue @relation(fields: [vanueId], references: [id])
    Category   Category @relation(fields: [CategoryId], references: [id])
    Admin          Admin?       @relation(fields: [adminId], references: [id])

    @@map("events")
}

model Vanue {
    id String @id @default(uuid())
    title String
    adminId String
    event Event[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Admin          Admin?       @relation(fields: [adminId], references:[id])
    @@map("Vanues")
}


model AvailableEvent {
    id             String       @id @default(uuid())
    eventId String
    event Event @relation(fields: [eventId], references: [id])
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    @@unique([eventId])
    @@map("available_events")
}

model Booking {
    id        String        @id @default(uuid())
    userId    String
    eventId   String        @unique
    scheduleDate      String
    status    BookingStatus @default(pending)
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    user      User          @relation(fields: [userId], references: [id])
    Event     Event         @relation(fields: [eventId], references: [id])
    @@map("bookings")
}

model Review {
    id        String   @id @default(uuid())
    userId    String   @unique
    eventId   String   @unique
    rating    String
    comment   String
    user      User     @relation(fields: [userId], references: [id])
    event     Event    @relation(fields: [eventId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Blog      Blog?    @relation(fields: [blogId], references: [id])
    blogId    String?

    @@map("reviews")
}

model Favorite {
    id      String @id @default(uuid())
    userId  String @unique
    eventId String @unique
    user      User     @relation(fields: [userId], references: [id])
    event     Event    @relation(fields: [eventId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FAQ {
    id        String   @id @default(uuid())
    question  String
    answer    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notification {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    message   String
    read Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Blog {
    id          String   @id @default(uuid())
    contentType String  @map("content_type")
    title       String
    content     String
    image String
    date DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Admin       Admin?   @relation(fields: [adminId], references: [id])
    adminId     String?
    review      Review[]

    @@map("blogs")
}

model Feedback {
  id          String   @id @default(uuid())
  userId      String
  comment     String
  suggestions String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("feedback")
}

enum Admin_ROLES {
    super_admin
    admin
}

enum GENDER {
    male
    female
}

enum BookingStatus {
    pending
    confirmed
    cancelled
}

enum PaymentStatus {
    pending
    confirmed
    cancelled
}