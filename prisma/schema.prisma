generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(uuid())
  email               String         @unique
  password            String
  firstName           String?
  middleName          String?
  lastName            String?
  profileImage        String?
  contactNo           String?
  dateOfBirth         String?
  bio                 String?
  gender              GENDER?
  needsPasswordChange Boolean?       @default(false)
  bloodGroup          String?
  address             String?
  role                String         @default("user")
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  adminId             String?
  Favorite            Favorite[]
  Notification        Notification[]
  booking             Booking[]
  Review              Review[]
  Admin               Admin?         @relation(fields: [adminId], references: [id])

  @@map("users")
}

model Admin {
  id                  String      @id @default(uuid())
  email               String      @unique
  password            String
  firstName           String?
  middleName          String?
  lastName            String?
  profileImage        String?
  contactNo           String?
  dateOfBirth         String?
  bio                 String?
  gender              GENDER?
  bloodGroup          String?
  needsPasswordChange Boolean?    @default(false)
  address             String?
  role                Admin_ROLES @default(admin)
  Category            Category[]
  vanue               Vanue[]
  blog                Blog[]
  event               Event[]
  users               User[]

  @@map("admins")
}

model Category {
  id        String   @id @default(uuid())
  name      String?
  image     String?
  adminId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Admin     Admin?   @relation(fields: [adminId], references: [id])
  event     Event[]

  @@map("Categorys")
}

model Event {
  id           String     @id @default(uuid())
  title        String?
  isBooked     Boolean?   @default(false)
  description  String?
  facility     String?
  price        Int?
  eventImg     String?
  adminId      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  CategoryId   String
  people       Int?       @default(0)
  vanueId      String
  isComingSoon Boolean?
  Favorite     Favorite[]
  Booking      Booking?
  Category     Category   @relation(fields: [CategoryId], references: [id])
  Admin        Admin?     @relation(fields: [adminId], references: [id])
  Vanue        Vanue      @relation(fields: [vanueId], references: [id])
  Review       Review[]

  @@map("events")
}

model Vanue {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adminId   String
  Admin     Admin    @relation(fields: [adminId], references: [id])
  event     Event[]

  @@map("Vanues")
}

model Booking {
  id           String        @id @default(uuid())
  userId       String
  eventId      String        @unique
  scheduleDate String
  status       BookingStatus @default(pending)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Event        Event         @relation(fields: [eventId], references: [id])
  user         User          @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogId    String?
  rating    Int
  Blog      Blog?    @relation(fields: [blogId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  content     String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adminId     String
  contentType String
  admin       Admin    @relation(fields: [adminId], references: [id])
  review      Review[]

  @@map("blogs")
}

model Feedback {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  email       String
  message     String
  name        String
  isPublished Boolean  @default(false)

  @@map("feedback")
}

enum Admin_ROLES {
  super_admin
  admin
}

enum GENDER {
  male
  female
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}

enum PaymentStatus {
  pending
  confirmed
  cancelled
}
