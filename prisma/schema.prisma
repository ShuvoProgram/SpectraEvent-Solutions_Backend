// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String     @id @default(uuid())
    firstName    String
    middleName   String
    lastName     String
    profileImage String
    email        String     @unique
    password     String
    role         USER_ROLES @default(customer)
    contactNo    String
    gender       GENDER
    bloodGroup   String
    address      String
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    booking      Booking[]
    Review       Review[]

    @@map("users")
}

model Organization {
    id        String   @id @default(uuid())
    name      String
    image     String
    event     Event[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("organization")
}

//     Ticket         Ticket[]
//     Booking        Booking[]
//     AvailableEvent AvailableEvent[]
//     Review         Review[]
model Event {
    id             String           @id @default(uuid())
    title          String
    organizationId String
    description    String
    duration       String
    facility       String?
    location       String
    price          Float
    people         String
    eventImg       String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    Organization   Organization?    @relation(fields: [organizationId], references: [id])
    Booking        Booking[]
    AvailableEvent AvailableEvent[]
    Review         Review[]
    Ticket         Ticket[]
}

model Ticket {
    id       String @id @default(uuid())
    name     String
    facility String
    price    Float
    event    Event  @relation(fields: [eventId], references: [id])
    eventId  String
}

model Booking {
    id               String         @id @default(uuid())
    userId           String
    eventId          String
    date             DateTime
    status           BookingStatus  @default(pending)
    user             User           @relation(fields: [userId], references: [id])
    availableEventId String         @map("available_event_id")
    availableEvent   AvailableEvent @relation(fields: [availableEventId], references: [id])
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    Event            Event          @relation(fields: [eventId], references: [id])

    @@map("bookings")
}

model TimeSlots {
    id             String           @id @default(uuid())
    slotTime       DateTime         @map("slot_time")
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    AvailableEvent AvailableEvent[]
}

model AvailableEvent {
    id             String    @id @default(uuid())
    slotDate       DateTime  @map("slot_date")
    availableSeats Int       @map("available_seats")
    isBooked       Boolean   @default(false) @map("is_booked")
    eventId        String    @map("service_id")
    event          Event     @relation(fields: [eventId], references: [id])
    slotId         String    @map("slot_id")
    slot           TimeSlots @relation(fields: [slotId], references: [id])
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    Booking        Booking[]

    @@unique([slotId, eventId, slotDate])
    @@map("available_services")
}

model Review {
    id        String   @id @default(uuid())
    userId    String
    eventId   String
    rating    String
    comment   String
    user      User     @relation(fields: [userId], references: [id])
    event     Event    @relation(fields: [eventId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum USER_ROLES {
    super_admin
    admin
    customer
}

enum GENDER {
    male
    female
}

enum BookingStatus {
    pending
    delivered
}
