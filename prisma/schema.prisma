// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id           String         @id @default(uuid())
    email        String         @unique
    password     String
    firstName    String?
    middleName   String?
    lastName     String?
    profileImage String?
    contactNo    String?
    dateOfBirth  String?
    bio          String?
    gender       GENDER?
    bloodGroup   String?
    address      String?
    role         String         @default("customer")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    booking      Booking[]
    Review       Review[]
    Favorite     Favorite[]
    Admin        Admin?         @relation(fields: [adminId], references: [id])
    adminId      String?
    Notification Notification[]

    @@map("users")
}

model Admin {
    id           String         @id @default(uuid())
    email        String         @unique
    password     String
    firstName    String?
    middleName   String?
    lastName     String?
    profileImage String?
    contactNo    String?
    dateOfBirth  String?
    bio          String?
    gender       GENDER?
    bloodGroup   String?
    address      String?
    role         Admin_ROLES    @default(admin)
    users        User[]
    event        Event[]
    organization Organization[]
    blog         Blog[]
}

// Event Organization
model Organization {
    id             String          @id @default(uuid())
    name           String
    image          String
    event          Event[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    AvailableEvent AvailableEvent?
    Admin          Admin?          @relation(fields: [adminId], references: [id])
    adminId        String?

    @@map("organization")
}

// Event
model Event {
    id             String       @id @default(uuid())
    title          String
    organizationId String
    isBooked       Boolean      @default(false)
    description    String
    eventDate      String
    facility       String?
    location       String
    price          Int
    maxCapacity    Int          @default(0)
    availableSeats Int
    eventImg       String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    Organization   Organization @relation(fields: [organizationId], references: [id])
    Booking        Booking[]
    Review         Review[]
    Favorite       Favorite?
    Admin          Admin?       @relation(fields: [adminId], references: [id])
    adminId        String?
    Ticket         Ticket[]
}

model Ticket {
    id       String @id @default(uuid())
    eventId  String @unique
    quantity Int
    price    Int
    event    Event  @relation(fields: [eventId], references: [id])
}

model AvailableEvent {
    id             String       @id @default(uuid())
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@unique([organizationId])
    @@map("available_events")
}

model Booking {
    id        String        @id @default(uuid())
    userId    String        @unique
    eventId   String        @unique
    date      String
    status    BookingStatus @default(confirmed)
    user      User          @relation(fields: [userId], references: [id])
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    Event     Event         @relation(fields: [eventId], references: [id])
    Payment   Payment?

    @@map("bookings")
}

model Payment {
    id            String        @id @default(uuid())
    amount        Int
    paymentDate   DateTime      @default(now())
    paymentStatus PaymentStatus @default(confirmed)
    bookingId     String        @unique
    booking       Booking       @relation(fields: [bookingId], references: [id])
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
}

model Review {
    id        String   @id @default(uuid())
    userId    String   @unique
    eventId   String   @unique
    rating    String
    comment   String
    user      User     @relation(fields: [userId], references: [id])
    event     Event    @relation(fields: [eventId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Blog      Blog?    @relation(fields: [blogId], references: [id])
    blogId    String?

    @@map("reviews")
}

model Favorite {
    id      String @id @default(uuid())
    userId  String @unique
    eventId String @unique

    user      User     @relation(fields: [userId], references: [id])
    event     Event    @relation(fields: [eventId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FAQ {
    id        String   @id @default(uuid())
    question  String
    answer    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notification {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    message   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Blog {
    id          String   @id @default(uuid())
    contentType String
    title       String
    content     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Admin       Admin?   @relation(fields: [adminId], references: [id])
    adminId     String?
    review      Review[]

    @@map("blogs")
}

enum Admin_ROLES {
    super_admin
    admin
}

enum GENDER {
    male
    female
}

enum BookingStatus {
    complete
    confirmed
    cancelled
}

enum PaymentStatus {
    complete
    confirmed
    cancelled
}
